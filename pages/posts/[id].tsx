import Head from "next/head";
import dynamic from "next/dynamic";
import { useTheme } from "next-themes";
import { NotionRenderer } from "react-notion-x";
import styles from "../../styles/Markdown.module.css";
import { getSinglePost } from "../../lib/getSinglePost";

const Code = dynamic(() =>
  import("react-notion-x/build/third-party/code").then((m) => m.Code)
);
const Collection = dynamic(() =>
  import("react-notion-x/build/third-party/collection").then(
    (m) => m.Collection
  )
);
const Equation = dynamic(() =>
  import("react-notion-x/build/third-party/equation").then((m) => m.Equation)
);
const Pdf = dynamic(
  () => import("react-notion-x/build/third-party/pdf").then((m) => m.Pdf),
  {
    ssr: false,
  }
);
const Modal = dynamic(
  () => import("react-notion-x/build/third-party/modal").then((m) => m.Modal),
  {
    ssr: false,
  }
);

const Post = ({ post }: { post: any }) => {
  const { theme, setTheme } = useTheme();
  return (
    <>
      <Head>
        <title>Post</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="favicon.ico" />
      </Head>
      {post && (
        <div className={styles.post}>
          <div className={styles.title}>
            <div className={styles.time}>{post.date}</div>
            <h1>
              {post.title.map((text: any, index: number) => text.plain_text)}
            </h1>
            <div className={styles.authors}>By {post.authors}</div>
          </div>
          <NotionRenderer
            recordMap={post.page}
            components={{
              Code,
              Collection,
              Equation,
              Modal,
              Pdf,
            }}
            fullPage={false}
            darkMode={theme === "dark"}
          ></NotionRenderer>
        </div>
      )}
    </>
  );
};

export default Post;

export const getStaticProps = async ({ params }: { params: any }) => {
  const data = await getSinglePost(params.id);
  console.log(data);
  return {
    props: { post: data },
    revalidate: 60,
  };
};

export const getStaticPaths = async () => {
  return {
    paths: [],
    fallback: true,
  };
};
